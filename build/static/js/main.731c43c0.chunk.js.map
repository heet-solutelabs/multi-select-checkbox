{"version":3,"sources":["SelectAllCheckBox.js","ListAllCheckBox.js","MultiSelectCheckBox.js","CheckBoxList.js","App.js","index.js"],"names":["SelectAllCheckBox","selectCheckBox","setSelectCheckBox","onChange","selectAllShowClassName","Array","isArray","length","some","item","label","value","id","className","checked","every","is_active","type","e","selectedAllCheckBox","map","target","arre","filter","htmlFor","ListAllCheckBox","listOfCheckBoxItemsClassName","index","style","marginBottom","find","current_selectbox","Object","is","selectedCheckBox","current_item","passOnChangedData","MultiSelectCheckBox","CheckBoxList","selectAllShow","checkBoxArr","React","useState","App","selectedValue","setSelectedValue","JSON","stringify","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.731c43c0.chunk.js","sourcesContent":["function SelectAllCheckBox({\n  selectCheckBox = [],\n  setSelectCheckBox = [],\n  onChange,\n  selectAllShowClassName,\n}) {\n  return (\n    <>\n      {Array.isArray(selectCheckBox) &&\n        selectCheckBox.length > 0 &&\n        selectCheckBox.some((item) => item.label && item.value) && (\n          <>\n            <input\n              id=\"select_all_checkbox\"\n              className={selectAllShowClassName}\n              checked={\n                Array.isArray(selectCheckBox) &&\n                selectCheckBox.length > 0 &&\n                selectCheckBox.every((item) => item.is_active === true)\n              }\n              type=\"checkbox\"\n              onChange={function (e) {\n                let selectedAllCheckBox = [...selectCheckBox].map(function (\n                  item\n                ) {\n                  let obj = {\n                    ...item,\n                    is_active: e.target.checked,\n                  };\n                  return obj;\n                });\n                let arre = selectedAllCheckBox\n                  .filter((item) => item.is_active)\n                  .map(function (item) {\n                    return {\n                      ...item,\n                    };\n                  });\n                onChange(\n                  arre.map((item) => {\n                    delete item.is_active;\n                    return { ...item };\n                  })\n                );\n                setSelectCheckBox(selectedAllCheckBox);\n              }}\n            />\n            <label htmlFor=\"select_all_checkbox\">select all</label>\n          </>\n        )}\n    </>\n  );\n}\n\nexport default SelectAllCheckBox;\n","function ListAllCheckBox({\n  selectCheckBox = [],\n  setSelectCheckBox,\n  onChange,\n  listOfCheckBoxItemsClassName,\n}) {\n  return (\n    <>\n      {Array.isArray(selectCheckBox) &&\n        selectCheckBox.length > 0 &&\n        selectCheckBox.map(function (item, index) {\n          return (\n            <div key={index}>\n              {item.label && item.value && (\n                <div className=\"flex\" style={{ marginBottom: \"10px\" }}>\n                  <input\n                    id={index}\n                    className={listOfCheckBoxItemsClassName}\n                    type=\"checkbox\"\n                    checked={\n                      selectCheckBox &&\n                      selectCheckBox.length > 0 &&\n                      selectCheckBox.every((item) => item.is_active === true)\n                        ? true\n                        : selectCheckBox?.find((current_selectbox) =>\n                            Object.is(\n                              current_selectbox?.is_active,\n                              item.is_active\n                            )\n                          )\n                        ? selectCheckBox?.find((current_selectbox) =>\n                            Object.is(\n                              current_selectbox?.is_active,\n                              item.is_active\n                            )\n                          ).is_active\n                        : false\n                    }\n                    onChange={function (e) {\n                      let selectedCheckBox = [...selectCheckBox].map(function (\n                        current_item\n                      ) {\n                        if (Object.is(current_item.label, item.label)) {\n                          return {\n                            ...current_item,\n                            is_active: e.target.checked,\n                          };\n                        } else {\n                          return {\n                            ...current_item,\n                          };\n                        }\n                      });\n                      let passOnChangedData = selectedCheckBox\n                        .filter((item) => item.is_active)\n                        .map(function (item) {\n                          return {\n                            ...item,\n                          };\n                        });\n\n                      onChange(\n                        passOnChangedData.map((item) => {\n                          delete item.is_active;\n                          return { ...item };\n                        })\n                      );\n                      setSelectCheckBox(selectedCheckBox);\n                    }}\n                  />\n                  <label htmlFor={index}>{item.label}</label>\n                </div>\n              )}\n            </div>\n          );\n        })}\n    </>\n  );\n}\n\nexport default ListAllCheckBox;\n","import React from \"react\";\nimport SelectAllCheckBox from \"./SelectAllCheckBox\";\nimport ListAllCheckBox from \"./ListAllCheckBox\";\n\nexport function MultiSelectCheckBox({\n  CheckBoxList = [],\n  onChange,\n  selectAllShow,\n  listOfCheckBoxItemsClassName = \"\",\n  selectAllShowClassName = \"\",\n}) {\n  let checkBoxArr = CheckBoxList.map((item) => ({\n    ...item,\n    is_active: false,\n  }));\n  const [selectCheckBox, setSelectCheckBox] = React.useState(checkBoxArr);\n  return (\n    <div>\n      {selectAllShow && (\n        <div style={{ marginBottom: \"10px\" }}>\n          <SelectAllCheckBox\n            selectCheckBox={selectCheckBox}\n            setSelectCheckBox={setSelectCheckBox}\n            onChange={function (item) {\n              onChange(item);\n            }}\n            selectAllShowClassName={selectAllShowClassName}\n          />\n        </div>\n      )}\n      <ListAllCheckBox\n        listOfCheckBoxItemsClassName={listOfCheckBoxItemsClassName}\n        selectCheckBox={selectCheckBox}\n        setSelectCheckBox={setSelectCheckBox}\n        onChange={function (item) {\n          onChange(item);\n        }}\n      />\n    </div>\n  );\n}\n","export const CheckBoxList = [\n  {\n    label: \"eat\",\n    value: \"eat\",\n  },\n  {\n    label: \"sleep\",\n    value: \"sleep\",\n  },\n  {\n    label: \"coding\",\n    value: \"coding\",\n  },\n  {\n    label: \"Repeat\",\n    value: \"Repeat\",\n  },\n  {\n    label: \"Reapeat again!\",\n    value: \"Reapeat again!\",\n  },\n  {\n    label: \"Reapeat again again!\",\n    value: \"Reapeat again again!\",\n  },\n];\n","import React from \"react\";\nimport { MultiSelectCheckBox } from \"./MultiSelectCheckBox\";\nimport { CheckBoxList } from \"./CheckBoxList\";\n\nexport default function App() {\n  const [selectedValue, setSelectedValue] = React.useState([]);\n  return (\n    <>\n      <p>{JSON.stringify(selectedValue, null, 2)}</p>\n      <MultiSelectCheckBox\n        selectAllShow={true}\n        selectAllShowClassName=\"Inside\"\n        listOfCheckBoxItemsClassName=\"test\"\n        CheckBoxList={CheckBoxList}\n        onChange={function (item) {\n          //  get All list of selected Item....\n          setSelectedValue(item);\n        }}\n      />\n    </>\n  );\n}\n","import ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}